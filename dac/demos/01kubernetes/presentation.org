* Send teaser/preview: email body + slide(s)
email content:
introduce what I will demo:
- will bring up the infrastructure: highly available/resilient
- then play around with kubernetes/apps
ask team/Selvan that they keep one VPC ( default ) empty/unused for the demo
slide: TO BE PREPARED

iterative build up:
* multi-master, single-node cluster






yes, this is a demo, but I think it doesn't hurt to make it a bit pedantic, meaning, let's also learn a few things here and there, yes? So the way I'll introduce concepts to you is via a problem statement and then showing you how to solve that problem using container approach?
quickly talk about containers:not really goingn to talk about them but a one-liner. anybody can please reach out to me  if you want me to conduct training on/for the same
quickly talk about cluster v/s server.

need to include in narrative: why a cluster? so launch a single pod ( not as a replicaset ) and show that if it crashes, nothing happens...maybe launch a pod/container even without a cluster?

narrative: launch cluster, walk through resources launched ( including a slide, if possible, use the fancy cloud diagramming tool )(may have more than one slide: with only ebs and one node, another with multiple nodes and EFS, etc.) and comment that how this infra supports high-availability, etc. The user , group and permissions generated are also part of the resources generated for this and can be show ( kops user, group, IAM permissions, etc. )(walk through aws infra launched, including Load Balancers, Auto-Scaling Groups, EBS/EFS, etc. and any other resources launched.)

then launch as service(replica set) and show that container can still be restarted, but!! all changes lost!
iteration:
1. launch container without cluster: works but gone if crashes, if terminated :: what to do?
next, launch cluster (multi-master, single-node cluster) :: what to do?
2. launch default jenkins container: does restart, but what about our changes: gone as well :: what to do?

next, persist changes through EBS and destroy container, thereby showing persistance.



same ELB url for accessing the resource, no matter whatever else happens

having shown various iteration of jenkins, show only final version of the bitbucket container tada!!

record preview video for just in-case ? : check with Venky if I can present through pre-recorded video
FUTURE TODOS:
cf templatization
ansible-isation (and azure?)
remaining tools to be containerized
app to be containerized
CI/CD pipeline out of those tools
CF/automation for the RDS instance
CF/automation for the EFS
Splitting of tools and app into namespaces

x-x-x-x-x-x-x-x
1. Launch cluster: while cluster launches show local docker run of jenkins and describe the shortcomings: doesn't restart and also when I do restart it, has lost any changes
- launch root.env + setupaws.sh and walk through resources provisioned ( users, groups, keys and permissions )
- launch kops.env + setupkos.sh this will take five minutes so talk about docker real quick, talk about cluster v/s bunch of servers real quick. Also take this time to launch a single jenkins container/pod


2. launch jenkins rs + loadbalancer service
at this point, show that killing a pod restarts , then setup container and again kill, to show that well, container does launch but changes are lost!



FINAL: Manually terminate various instances and show service as up and running
CLEANUP: destroy cluster, RDS instance
x-x-x-x-x-x
slide: let's solve 1st problem: we want container to be resilient (should restart)

problem 2: need container without having to run setup wizard
problem 3: persist our data changes: use EBS volume
